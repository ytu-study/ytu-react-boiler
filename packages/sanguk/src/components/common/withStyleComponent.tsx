import classnames from 'classnames';
import type { AllHTMLAttributes, ElementType } from 'react';
import React from 'react';
import type { Sprinkles } from '@/styles/sprinkles.css';
import { sprinkles } from '@/styles/sprinkles.css';
import type { themeColors } from '@/styles/theme.css';

type Attributes = Omit<AllHTMLAttributes<HTMLElement>, 'className' | 'content' | 'height' | 'translate' | 'color' | 'width' | 'cursor'>;

type ThemeColor = typeof themeColors[keyof typeof themeColors];

export interface BoxProps extends Attributes, Sprinkles {
  className?: Parameters<typeof classnames>[0];
  color?: ThemeColor;
  backgroundColor?: ThemeColor;
  borderColor?: ThemeColor;
}

const atomClasses = ({
  p,
  px,
  py,
  paddingTop,
  paddingBottom,
  paddingLeft,
  paddingRight,
  m,
  mx,
  my,
  marginTop,
  marginBottom,
  marginLeft,
  marginRight,
  display,
  alignItems,
  justifyContent,
  flexDirection,
  flexWrap,
  flexGrow,
  flexShrink,
  borderRadius,
  position,
  top,
  bottom,
  left,
  right,
  inset,
  width,
  zIndex,
  opacity,
  pointerEvents,
  cursor,
  textAlign,
  maxWidth,
  minWidth,
  transition,
  overflow,
  fontSize,
  lineHeight,
  alignContent,
  alignSelf,
  borderB,
  borderL,
  borderBottomLeftRadius,
  borderBottomRightRadius,
  borderBottomWidth,
  borderLeftWidth,
  borderR,
  borderRightWidth,
  borderTopLeftRadius,
  borderTopRightRadius,
  borderTopWidth,
  borderStyle,
  borderT,
  borderWidth,
  borderX,
  borderY,
  boxShadow,
  columnGap,
  gap,
  gapX,
  gapY,
  flex,
  flexBasis,
  fontFamily,
  fontStyle,
  fontWeight,
  height,
  insetX,
  insetY,
  justifyItems,
  justifySelf,
  maxHeight,
  minHeight,
  objectFit,
  order,
  placeItems,
  placeContent,
  placeSelf,
  overflowX,
  overflowY,
  rounded,
  roundedB,
  roundedBl,
  roundedBr,
  roundedL,
  roundedR,
  roundedT,
  roundedTl,
  roundedTr,
  rowGap,
  visibility,
  children,
  className,
  style,
  color,
  backgroundColor,
  borderColor,
  ...attrs
}: BoxProps) => {
  return {
    children,
    className,
    color,
    backgroundColor,
    borderColor,
    style,
    attrs,
    atom: sprinkles({
      p,
      px,
      py,
      paddingTop,
      paddingBottom,
      paddingLeft,
      paddingRight,
      m,
      mx,
      my,
      marginTop,
      marginBottom,
      marginLeft,
      marginRight,
      display,
      alignItems,
      justifyContent,
      flexDirection,
      flexWrap,
      flexGrow,
      flexShrink,
      borderRadius,
      position,
      top,
      bottom,
      left,
      right,
      inset,
      width,
      zIndex,
      opacity,
      pointerEvents,
      cursor,
      textAlign,
      maxWidth,
      minWidth,
      transition,
      overflow,
      fontSize,
      lineHeight,
      alignContent,
      alignSelf,
      borderB,
      borderL,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      borderBottomWidth,
      borderLeftWidth,
      borderR,
      borderRightWidth,
      borderTopLeftRadius,
      borderTopRightRadius,
      borderTopWidth,
      borderStyle,
      borderT,
      borderWidth,
      borderX,
      borderY,
      boxShadow,
      columnGap,
      gap,
      gapX,
      gapY,
      flex,
      flexBasis,
      fontFamily,
      fontStyle,
      fontWeight,
      height,
      insetX,
      insetY,
      justifyItems,
      justifySelf,
      maxHeight,
      minHeight,
      objectFit,
      order,
      placeItems,
      placeContent,
      placeSelf,
      overflowX,
      overflowY,
      rounded,
      roundedB,
      roundedBl,
      roundedBr,
      roundedL,
      roundedR,
      roundedT,
      roundedTl,
      roundedTr,
      rowGap,
      visibility,
    }),
  };
};

export default function WithStyleComponent(tag: ElementType): { (props: BoxProps): JSX.Element } {
  return (props: BoxProps) => {
    const { children, className, color, backgroundColor, borderColor, style, attrs, atom } = atomClasses(props);
    return React.createElement(tag, {
      className: classnames(className, atom),
      style: {
        ...style,
        color,
        backgroundColor,
        borderColor,
      },
      children,
      ...attrs,
    });
  };
}
