import classnames from 'classnames';
import type { AllHTMLAttributes, ElementType } from 'react';
import React from 'react';
import type { Sprinkles } from '@/styles/sprinkles.css';
import { sprinkles } from '@/styles/sprinkles.css';
import type { themeColors } from '@/styles/theme.css';

type Attributes = Omit<AllHTMLAttributes<HTMLElement>, 'className' | 'content' | 'height' | 'translate' | 'color' | 'width' | 'cursor'>;

type ThemeColor = typeof themeColors[keyof typeof themeColors];

export interface BoxProps extends Attributes, Sprinkles {
  className?: Parameters<typeof classnames>[0];
}

const atomClasses = ({
  p,
  px,
  py,
  pt,
  pb,
  pl,
  pr,
  paddingTop,
  paddingBottom,
  paddingLeft,
  paddingRight,
  m,
  mx,
  my,
  marginTop,
  marginBottom,
  marginLeft,
  marginRight,
  display,
  alignItems,
  justifyContent,
  flexDirection,
  flexWrap,
  flexGrow,
  flexShrink,
  borderRadius,
  position,
  t,
  b,
  l,
  r,
  inset,
  w,
  zIndex,
  opacity,
  pointerEvents,
  cursor,
  textAlign,
  maxW,
  minW,
  transition,
  overflow,
  fontSize,
  lineHeight,
  alignContent,
  alignSelf,
  borderB,
  borderL,
  borderBottomLeftRadius,
  borderBottomRightRadius,
  borderBottomWidth,
  borderLeftWidth,
  borderR,
  borderRightWidth,
  borderTopLeftRadius,
  borderTopRightRadius,
  borderTopWidth,
  borderStyle,
  borderT,
  borderWidth,
  borderX,
  borderY,
  boxShadow,
  columnGap,
  gap,
  gapX,
  gapY,
  flex,
  flexBasis,
  fontFamily,
  fontStyle,
  fontWeight,
  h,
  insetX,
  insetY,
  justifyItems,
  justifySelf,
  maxH,
  minH,
  objectFit,
  order,
  placeItems,
  placeContent,
  placeSelf,
  overflowX,
  overflowY,
  rounded,
  roundedB,
  roundedBl,
  roundedBr,
  roundedL,
  roundedR,
  roundedT,
  roundedTl,
  roundedTr,
  rowGap,
  visibility,
  children,
  className,
  style,
  color,
  backgroundColor,
  borderColor,
  ...attrs
}: BoxProps) => ({
  children,
  className,
  style,
  attrs,
  atom: sprinkles({
    p,
    px,
    py,
    pt,
    pb,
    pl,
    pr,
    color,
    borderColor,
    backgroundColor,
    paddingTop,
    paddingBottom,
    paddingLeft,
    paddingRight,
    m,
    mx,
    my,
    marginTop,
    marginBottom,
    marginLeft,
    marginRight,
    display,
    alignItems,
    justifyContent,
    flexDirection,
    flexWrap,
    flexGrow,
    flexShrink,
    borderRadius,
    position,
    t,
    b,
    l,
    r,
    inset,
    w,
    zIndex,
    opacity,
    pointerEvents,
    cursor,
    textAlign,
    maxW,
    minW,
    transition,
    overflow,
    fontSize,
    lineHeight,
    alignContent,
    alignSelf,
    borderB,
    borderL,
    borderBottomLeftRadius,
    borderBottomRightRadius,
    borderBottomWidth,
    borderLeftWidth,
    borderR,
    borderRightWidth,
    borderTopLeftRadius,
    borderTopRightRadius,
    borderTopWidth,
    borderStyle,
    borderT,
    borderWidth,
    borderX,
    borderY,
    boxShadow,
    columnGap,
    gap,
    gapX,
    gapY,
    flex,
    flexBasis,
    fontFamily,
    fontStyle,
    fontWeight,
    h,
    insetX,
    insetY,
    justifyItems,
    justifySelf,
    maxH,
    minH,
    objectFit,
    order,
    placeItems,
    placeContent,
    placeSelf,
    overflowX,
    overflowY,
    rounded,
    roundedB,
    roundedBl,
    roundedBr,
    roundedL,
    roundedR,
    roundedT,
    roundedTl,
    roundedTr,
    rowGap,
    visibility,
  }),
});

export default function WithStyleComponent(tag: ElementType) {
  return (props: Nullable<BoxProps>): JSX.Element => {
    const { children, className, style, attrs, atom } = atomClasses(props as BoxProps);
    return React.createElement(tag, {
      className: classnames(className, atom),
      style,
      children,
      ...attrs,
    });
  };
}
